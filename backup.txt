<html>

    <head>
        <title>Hello, world! This is Qingshan Zhang's web page.</title>
        <link rel="stylesheet" type="text/css" href="/css/style.css">
    </head>

    <body>
    <h1>Hello, world!</h1>

    <p>
    This is a simple static HTML file created by Qingshan Zhang.
    </p>

    </body>

</html> 

 There's three pieces to this app: the static resources (HTML, CSS, JavaScript-at-rest), the server-side code (in Python or whatever language you picked), and the browser-side code (JavaScript-in-motion).  The data store can only be accessed by one of these.

  “one of these” is the server-side code. If you are using Python, you access the data store directly from Python. If you want access to data from the browser, you need to expose an HTTP endpoint (in Python) that gets a request for it, pulls it from the data store, assembles it into JSON, and replies. The browser, then, is just making HTTP requests for JSON, getting that, and dumping it into the right parts of the page.

  This part of the labs is often the hardest for people to first understand, because the client/server separation on the web has been blurred so much, in everyone’s experience using it. What we’re doing here is making sure we, from the very beginning, have a chance to get this right in our heads.
If people are still struggling with this lab by Friday, we’ll extend it. If everyone understands the concepts in Lab 1 really well, and has taken the time necessary to do so, then the remaining labs will be much, much simpler.
So, let’s chat on Friday about this client/server thing some more, make sure we’re all clear on what part does what, and if there are people who want to keep trying on their lab over the next few days, we can help you.
The gist of the mental model is this:
Server:
React to HTTP requests (like GET /events)
Access the data store
Assemble data into JSON for passing back out (if you’re using Python, you can just assemble a dict and pass it out directly, Flask handles the rest)
Browser:
Request the main page (yourdomain.appengine.com/index.html, for example)
Run javascript code on that page (this happens automatically if you use the DOMContentLoaded event)
Request data (like GET yourdomain.appengine.com/events)
Take response and put the values into the document object model (DOM) so that the data appears on the page.
So, the browser gets every ounce of outside data via HTTP requests, and that data comes in JSON format.
The server gets its data directly from the datastore.